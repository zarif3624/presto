{"ast":null,"code":"var _jsxFileName = \"/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/components/Contact.js\";\nimport React, { useState } from \"react\";\nimport FormAlert from \"./FormAlert\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport contact from \"./../util/contact.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction Contact(props) {\n  const [pending, setPending] = useState(false);\n  const [formAlert, setFormAlert] = useState(null);\n  const {\n    handleSubmit,\n    register,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = ({\n    name,\n    email,\n    message\n  }) => {\n    // Show pending indicator\n    setPending(true);\n    contact.submit({\n      name,\n      email,\n      message\n    }).then(() => {\n      // Clear form\n      reset(); // Show success alert message\n\n      setFormAlert({\n        type: \"success\",\n        message: \"Your message has been sent!\"\n      });\n    }).catch(error => {\n      // Show error alert message\n      setFormAlert({\n        type: \"error\",\n        message: error.message\n      });\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, formAlert && /*#__PURE__*/React.createElement(FormAlert, {\n    type: formAlert.type,\n    message: formAlert.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, props.showNameField && /*#__PURE__*/React.createElement(Form.Group, {\n    as: Col,\n    xs: 12,\n    sm: 6,\n    controlId: \"formName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    size: props.inputSize,\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Name\",\n    error: errors.name,\n    inputRef: register({\n      required: \"Please enter your name\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Col,\n    xs: 12,\n    sm: props.showNameField ? 6 : 12,\n    controlId: \"formEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    size: props.inputSize,\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Email\",\n    error: errors.email,\n    inputRef: register({\n      required: \"Please enter your email\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    size: props.inputSize,\n    name: \"message\",\n    type: \"textarea\",\n    placeholder: \"Message\",\n    rows: 5,\n    error: errors.message,\n    inputRef: register({\n      required: \"Please enter a message\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: props.buttonColor,\n    size: props.inputSize,\n    type: \"submit\",\n    disabled: pending,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, props.buttonText), pending && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": true,\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, \"Sending...\")))));\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/components/Contact.js"],"names":["React","useState","FormAlert","Form","Col","FormField","Button","Spinner","contact","useForm","Contact","props","pending","setPending","formAlert","setFormAlert","handleSubmit","register","errors","reset","onSubmit","name","email","message","submit","then","type","catch","error","finally","showNameField","inputSize","required","buttonColor","buttonText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormAlert from \"./FormAlert\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport contact from \"./../util/contact.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction Contact(props) {\n  const [pending, setPending] = useState(false);\n  const [formAlert, setFormAlert] = useState(null);\n  const { handleSubmit, register, errors, reset } = useForm();\n\n  const onSubmit = ({ name, email, message }) => {\n    // Show pending indicator\n    setPending(true);\n\n    contact\n      .submit({ name, email, message })\n      .then(() => {\n        // Clear form\n        reset();\n        // Show success alert message\n        setFormAlert({\n          type: \"success\",\n          message: \"Your message has been sent!\",\n        });\n      })\n      .catch((error) => {\n        // Show error alert message\n        setFormAlert({\n          type: \"error\",\n          message: error.message,\n        });\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <>\n      {formAlert && (\n        <FormAlert\n          type={formAlert.type}\n          message={formAlert.message}\n        ></FormAlert>\n      )}\n\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Row>\n          {props.showNameField && (\n            <Form.Group as={Col} xs={12} sm={6} controlId=\"formName\">\n              <FormField\n                size={props.inputSize}\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"Name\"\n                error={errors.name}\n                inputRef={register({\n                  required: \"Please enter your name\",\n                })}\n              ></FormField>\n            </Form.Group>\n          )}\n\n          <Form.Group\n            as={Col}\n            xs={12}\n            sm={props.showNameField ? 6 : 12}\n            controlId=\"formEmail\"\n          >\n            <FormField\n              size={props.inputSize}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              error={errors.email}\n              inputRef={register({\n                required: \"Please enter your email\",\n              })}\n            ></FormField>\n          </Form.Group>\n        </Form.Row>\n        <Form.Group controlId=\"formMessage\">\n          <FormField\n            size={props.inputSize}\n            name=\"message\"\n            type=\"textarea\"\n            placeholder=\"Message\"\n            rows={5}\n            error={errors.message}\n            inputRef={register({\n              required: \"Please enter a message\",\n            })}\n          ></FormField>\n        </Form.Group>\n        <Button\n          variant={props.buttonColor}\n          size={props.inputSize}\n          type=\"submit\"\n          disabled={pending}\n        >\n          <span>{props.buttonText}</span>\n\n          {pending && (\n            <Spinner\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden={true}\n              className=\"ml-2\"\n            >\n              <span className=\"sr-only\">Sending...</span>\n            </Spinner>\n          )}\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}