{"ast":null,"code":"var _jsxFileName = \"/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/util/auth.js\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport firebase from \"./firebase\";\nimport { createUser } from \"./db\";\nconst authContext = createContext(); // Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }, children);\n} // Hook that enables any component to subscribe to auth state\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null); // Handle a new user object\n\n  const handleUser = (rawUser, addToDb = true) => {\n    if (rawUser) {\n      // Get user object in format expected by front-end\n      const user = formatUser(rawUser);\n\n      if (addToDb) {\n        // Add user to database\n        createUser(user.uid, {\n          email: user.email\n        });\n      }\n\n      setUser(user);\n      return user;\n    } else {\n      setUser(false);\n      return false;\n    }\n  };\n\n  const signup = (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => handleUser(response.user));\n  };\n\n  const signin = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => handleUser(response.user));\n  };\n\n  const signinWithProvider = providerName => {\n    const {\n      providerMethod,\n      parameters\n    } = providers.find(p => p.name === providerName);\n    const provider = new providerMethod();\n\n    if (parameters) {\n      provider.setCustomParameters(parameters);\n    }\n\n    return firebase.auth().signInWithPopup(provider).then(response => handleUser(response.user));\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => handleUser(false));\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n    return firebase.auth().confirmPasswordReset(resetCode, password).then(() => {\n      return true;\n    });\n  };\n\n  const updateEmail = email => {\n    return firebase.auth().currentUser.updateEmail(email).then(() => {\n      handleUser(firebase.auth().currentUser);\n    });\n  };\n\n  const updatePassword = password => {\n    return firebase.auth().currentUser.updatePassword(password);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => handleUser(user, false)); // Unsubscribe on cleanup\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword\n  };\n} // Format user object\n// If there are extra fields you want from the original user\n// object then you'd add those here.\n\n\nconst formatUser = user => {\n  return {\n    uid: user.uid,\n    email: user.email,\n    // Create an array containing the user's providers (password, google, etc).\n    providers: user.providerData.map(({\n      providerId\n    }) => {\n      // Get the name for this providerId\n      return providers.find(p => p.id === providerId).name;\n    })\n  };\n};\n\nconst providers = [{\n  id: \"password\",\n  name: \"password\"\n}, {\n  id: \"google.com\",\n  name: \"google\",\n  providerMethod: firebase.auth.GoogleAuthProvider\n}, {\n  id: \"facebook.com\",\n  name: \"facebook\",\n  providerMethod: firebase.auth.FacebookAuthProvider,\n  parameters: {\n    // Tell fb to show popup size UI instead of full website\n    display: \"popup\"\n  }\n}, {\n  id: \"twitter.com\",\n  name: \"twitter\",\n  providerMethod: firebase.auth.TwitterAuthProvider\n}, {\n  id: \"github.com\",\n  name: \"github\",\n  providerMethod: firebase.auth.GithubAuthProvider\n}];\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};","map":{"version":3,"sources":["/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/util/auth.js"],"names":["React","useState","useEffect","useContext","createContext","queryString","firebase","createUser","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","handleUser","rawUser","addToDb","formatUser","uid","email","signup","password","createUserWithEmailAndPassword","then","response","signin","signInWithEmailAndPassword","signinWithProvider","providerName","providerMethod","parameters","providers","find","p","name","provider","setCustomParameters","signInWithPopup","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","updateEmail","currentUser","updatePassword","unsubscribe","onAuthStateChanged","providerData","map","providerId","id","GoogleAuthProvider","FacebookAuthProvider","display","TwitterAuthProvider","GithubAuthProvider","key","parse","window","location","search"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport firebase from \"./firebase\";\nimport { createUser } from \"./db\";\n\nconst authContext = createContext();\n\n// Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook that enables any component to subscribe to auth state\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // Handle a new user object\n  const handleUser = (rawUser, addToDb = true) => {\n    if (rawUser) {\n      // Get user object in format expected by front-end\n      const user = formatUser(rawUser);\n\n      if (addToDb) {\n        // Add user to database\n        createUser(user.uid, { email: user.email });\n      }\n\n      setUser(user);\n      return user;\n    } else {\n      setUser(false);\n      return false;\n    }\n  };\n\n  const signup = (email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((response) => handleUser(response.user));\n  };\n\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((response) => handleUser(response.user));\n  };\n\n  const signinWithProvider = (providerName) => {\n    const { providerMethod, parameters } = providers.find(\n      (p) => p.name === providerName\n    );\n\n    const provider = new providerMethod();\n    if (parameters) {\n      provider.setCustomParameters(parameters);\n    }\n\n    return firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then((response) => handleUser(response.user));\n  };\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => handleUser(false));\n  };\n\n  const sendPasswordResetEmail = (email) => {\n    return firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        return true;\n      });\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n\n    return firebase\n      .auth()\n      .confirmPasswordReset(resetCode, password)\n      .then(() => {\n        return true;\n      });\n  };\n\n  const updateEmail = (email) => {\n    return firebase\n      .auth()\n      .currentUser.updateEmail(email)\n      .then(() => {\n        handleUser(firebase.auth().currentUser);\n      });\n  };\n\n  const updatePassword = (password) => {\n    return firebase.auth().currentUser.updatePassword(password);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = firebase\n      .auth()\n      .onAuthStateChanged((user) => handleUser(user, false));\n\n    // Unsubscribe on cleanup\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n  };\n}\n\n// Format user object\n// If there are extra fields you want from the original user\n// object then you'd add those here.\nconst formatUser = (user) => {\n  return {\n    uid: user.uid,\n    email: user.email,\n    // Create an array containing the user's providers (password, google, etc).\n    providers: user.providerData.map(({ providerId }) => {\n      // Get the name for this providerId\n      return providers.find((p) => p.id === providerId).name;\n    }),\n  };\n};\n\nconst providers = [\n  {\n    id: \"password\",\n    name: \"password\",\n  },\n  {\n    id: \"google.com\",\n    name: \"google\",\n    providerMethod: firebase.auth.GoogleAuthProvider,\n  },\n  {\n    id: \"facebook.com\",\n    name: \"facebook\",\n    providerMethod: firebase.auth.FacebookAuthProvider,\n    parameters: {\n      // Tell fb to show popup size UI instead of full website\n      display: \"popup\",\n    },\n  },\n  {\n    id: \"twitter.com\",\n    name: \"twitter\",\n    providerMethod: firebase.auth.TwitterAuthProvider,\n  },\n  {\n    id: \"github.com\",\n    name: \"github\",\n    providerMethod: firebase.auth.GithubAuthProvider,\n  },\n];\n\nconst getFromQueryString = (key) => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}