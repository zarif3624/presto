{"ast":null,"code":"var _jsxFileName = \"/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/components/SettingsPassword.js\";\nimport React, { useState } from \"react\";\nimport FormAlert from \"./FormAlert\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsPassword(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [formAlert, setFormAlert] = useState(null);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n\n  const onSubmit = data => {\n    // Show pending indicator\n    setPending(true);\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Show success alert message\n\n      setFormAlert({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }).catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Remove existing alert message\n        setFormAlert(null); // Show re-authentication modal and\n        // then re-call onSubmit() when done.\n\n        props.onRequireReauth(() => {\n          onSubmit({\n            pass: data.pass\n          });\n        });\n      } else {\n        // Show error alert message\n        setFormAlert({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, formAlert && formAlert.message && /*#__PURE__*/React.createElement(FormAlert, {\n    type: formAlert.type,\n    message: formAlert.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"pass\",\n    type: \"password\",\n    label: \"New Password\",\n    placeholder: \"Password\",\n    error: errors.pass,\n    inputRef: register({\n      required: \"Please enter a password\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"confirmPass\",\n    type: \"password\",\n    label: \"Confirm New Password\",\n    placeholder: \"Confirm Password\",\n    error: errors.confirmPass,\n    inputRef: register({\n      required: \"Please enter your new password again\",\n      validate: value => {\n        if (value === getValues().pass) {\n          return true;\n        } else {\n          return \"This doesn't match your password\";\n        }\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: props.buttonColor,\n    size: props.inputSize,\n    type: \"submit\",\n    disabled: pending,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Save\"), pending && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": true,\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, \"Sending...\")))));\n}\n\nexport default SettingsPassword;","map":{"version":3,"sources":["/Users/zarif.choudhury@ibm.com/Documents/c4c_disaster_proj/src/components/SettingsPassword.js"],"names":["React","useState","FormAlert","Form","FormField","Button","Spinner","useAuth","useForm","SettingsPassword","props","auth","pending","setPending","formAlert","setFormAlert","register","handleSubmit","errors","reset","getValues","onSubmit","data","updatePassword","pass","then","type","message","catch","error","code","onRequireReauth","finally","required","confirmPass","validate","value","buttonColor","inputSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormAlert from \"./FormAlert\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsPassword(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const [formAlert, setFormAlert] = useState(null);\n\n  const { register, handleSubmit, errors, reset, getValues } = useForm();\n\n  const onSubmit = (data) => {\n    // Show pending indicator\n    setPending(true);\n\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Show success alert message\n        setFormAlert({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Remove existing alert message\n          setFormAlert(null);\n\n          // Show re-authentication modal and\n          // then re-call onSubmit() when done.\n          props.onRequireReauth(() => {\n            onSubmit({ pass: data.pass });\n          });\n        } else {\n          // Show error alert message\n          setFormAlert({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <>\n      {formAlert && formAlert.message && (\n        <FormAlert\n          type={formAlert.type}\n          message={formAlert.message}\n        ></FormAlert>\n      )}\n\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Group controlId=\"formName\">\n          <FormField\n            name=\"pass\"\n            type=\"password\"\n            label=\"New Password\"\n            placeholder=\"Password\"\n            error={errors.pass}\n            inputRef={register({\n              required: \"Please enter a password\",\n            })}\n          ></FormField>\n        </Form.Group>\n        <Form.Group controlId=\"formEmail\">\n          <FormField\n            name=\"confirmPass\"\n            type=\"password\"\n            label=\"Confirm New Password\"\n            placeholder=\"Confirm Password\"\n            error={errors.confirmPass}\n            inputRef={register({\n              required: \"Please enter your new password again\",\n              validate: (value) => {\n                if (value === getValues().pass) {\n                  return true;\n                } else {\n                  return \"This doesn't match your password\";\n                }\n              },\n            })}\n          ></FormField>\n        </Form.Group>\n        <Button\n          variant={props.buttonColor}\n          size={props.inputSize}\n          type=\"submit\"\n          disabled={pending}\n        >\n          <span>Save</span>\n\n          {pending && (\n            <Spinner\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden={true}\n              className=\"ml-2\"\n            >\n              <span className=\"sr-only\">Sending...</span>\n            </Spinner>\n          )}\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport default SettingsPassword;\n"]},"metadata":{},"sourceType":"module"}